// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_weights.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fweights_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fweights_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fweights_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fweights_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fweights_2eproto;
class SchedulingWeights;
class SchedulingWeightsDefaultTypeInternal;
extern SchedulingWeightsDefaultTypeInternal _SchedulingWeights_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SchedulingWeights* Arena::CreateMaybeMessage<::SchedulingWeights>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SchedulingWeights PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SchedulingWeights) */ {
 public:
  inline SchedulingWeights() : SchedulingWeights(nullptr) {};
  virtual ~SchedulingWeights();

  SchedulingWeights(const SchedulingWeights& from);
  SchedulingWeights(SchedulingWeights&& from) noexcept
    : SchedulingWeights() {
    *this = ::std::move(from);
  }

  inline SchedulingWeights& operator=(const SchedulingWeights& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchedulingWeights& operator=(SchedulingWeights&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchedulingWeights& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SchedulingWeights* internal_default_instance() {
    return reinterpret_cast<const SchedulingWeights*>(
               &_SchedulingWeights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SchedulingWeights& a, SchedulingWeights& b) {
    a.Swap(&b);
  }
  inline void Swap(SchedulingWeights* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchedulingWeights* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchedulingWeights* New() const final {
    return CreateMaybeMessage<SchedulingWeights>(nullptr);
  }

  SchedulingWeights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchedulingWeights>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchedulingWeights& from);
  void MergeFrom(const SchedulingWeights& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchedulingWeights* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SchedulingWeights";
  }
  protected:
  explicit SchedulingWeights(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fweights_2eproto);
    return ::descriptor_table_control_5fweights_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 2,
    kRanIndexFieldNumber = 1,
  };
  // repeated float weights = 2;
  int weights_size() const;
  private:
  int _internal_weights_size() const;
  public:
  void clear_weights();
  private:
  float _internal_weights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_weights() const;
  void _internal_add_weights(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_weights();
  public:
  float weights(int index) const;
  void set_weights(int index, float value);
  void add_weights(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weights();

  // uint32 ran_index = 1;
  void clear_ran_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 ran_index() const;
  void set_ran_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ran_index() const;
  void _internal_set_ran_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SchedulingWeights)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weights_;
  mutable std::atomic<int> _weights_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ran_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fweights_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SchedulingWeights

// uint32 ran_index = 1;
inline void SchedulingWeights::clear_ran_index() {
  ran_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedulingWeights::_internal_ran_index() const {
  return ran_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedulingWeights::ran_index() const {
  // @@protoc_insertion_point(field_get:SchedulingWeights.ran_index)
  return _internal_ran_index();
}
inline void SchedulingWeights::_internal_set_ran_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ran_index_ = value;
}
inline void SchedulingWeights::set_ran_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ran_index(value);
  // @@protoc_insertion_point(field_set:SchedulingWeights.ran_index)
}

// repeated float weights = 2;
inline int SchedulingWeights::_internal_weights_size() const {
  return weights_.size();
}
inline int SchedulingWeights::weights_size() const {
  return _internal_weights_size();
}
inline void SchedulingWeights::clear_weights() {
  weights_.Clear();
}
inline float SchedulingWeights::_internal_weights(int index) const {
  return weights_.Get(index);
}
inline float SchedulingWeights::weights(int index) const {
  // @@protoc_insertion_point(field_get:SchedulingWeights.weights)
  return _internal_weights(index);
}
inline void SchedulingWeights::set_weights(int index, float value) {
  weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:SchedulingWeights.weights)
}
inline void SchedulingWeights::_internal_add_weights(float value) {
  weights_.Add(value);
}
inline void SchedulingWeights::add_weights(float value) {
  _internal_add_weights(value);
  // @@protoc_insertion_point(field_add:SchedulingWeights.weights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SchedulingWeights::_internal_weights() const {
  return weights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SchedulingWeights::weights() const {
  // @@protoc_insertion_point(field_list:SchedulingWeights.weights)
  return _internal_weights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SchedulingWeights::_internal_mutable_weights() {
  return &weights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SchedulingWeights::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:SchedulingWeights.weights)
  return _internal_mutable_weights();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fweights_2eproto
