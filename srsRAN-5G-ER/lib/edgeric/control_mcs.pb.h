// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_mcs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fmcs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fmcs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fmcs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fmcs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fmcs_2eproto;
class mcs_control;
class mcs_controlDefaultTypeInternal;
extern mcs_controlDefaultTypeInternal _mcs_control_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::mcs_control* Arena::CreateMaybeMessage<::mcs_control>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class mcs_control PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mcs_control) */ {
 public:
  inline mcs_control() : mcs_control(nullptr) {};
  virtual ~mcs_control();

  mcs_control(const mcs_control& from);
  mcs_control(mcs_control&& from) noexcept
    : mcs_control() {
    *this = ::std::move(from);
  }

  inline mcs_control& operator=(const mcs_control& from) {
    CopyFrom(from);
    return *this;
  }
  inline mcs_control& operator=(mcs_control&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mcs_control& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mcs_control* internal_default_instance() {
    return reinterpret_cast<const mcs_control*>(
               &_mcs_control_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(mcs_control& a, mcs_control& b) {
    a.Swap(&b);
  }
  inline void Swap(mcs_control* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mcs_control* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mcs_control* New() const final {
    return CreateMaybeMessage<mcs_control>(nullptr);
  }

  mcs_control* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mcs_control>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mcs_control& from);
  void MergeFrom(const mcs_control& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mcs_control* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mcs_control";
  }
  protected:
  explicit mcs_control(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmcs_2eproto);
    return ::descriptor_table_control_5fmcs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMcsFieldNumber = 2,
    kRanIndexFieldNumber = 1,
  };
  // repeated float mcs = 2;
  int mcs_size() const;
  private:
  int _internal_mcs_size() const;
  public:
  void clear_mcs();
  private:
  float _internal_mcs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_mcs() const;
  void _internal_add_mcs(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_mcs();
  public:
  float mcs(int index) const;
  void set_mcs(int index, float value);
  void add_mcs(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mcs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mcs();

  // uint32 ran_index = 1;
  void clear_ran_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 ran_index() const;
  void set_ran_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ran_index() const;
  void _internal_set_ran_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mcs_control)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mcs_;
  mutable std::atomic<int> _mcs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ran_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmcs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// mcs_control

// uint32 ran_index = 1;
inline void mcs_control::clear_ran_index() {
  ran_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mcs_control::_internal_ran_index() const {
  return ran_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 mcs_control::ran_index() const {
  // @@protoc_insertion_point(field_get:mcs_control.ran_index)
  return _internal_ran_index();
}
inline void mcs_control::_internal_set_ran_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ran_index_ = value;
}
inline void mcs_control::set_ran_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ran_index(value);
  // @@protoc_insertion_point(field_set:mcs_control.ran_index)
}

// repeated float mcs = 2;
inline int mcs_control::_internal_mcs_size() const {
  return mcs_.size();
}
inline int mcs_control::mcs_size() const {
  return _internal_mcs_size();
}
inline void mcs_control::clear_mcs() {
  mcs_.Clear();
}
inline float mcs_control::_internal_mcs(int index) const {
  return mcs_.Get(index);
}
inline float mcs_control::mcs(int index) const {
  // @@protoc_insertion_point(field_get:mcs_control.mcs)
  return _internal_mcs(index);
}
inline void mcs_control::set_mcs(int index, float value) {
  mcs_.Set(index, value);
  // @@protoc_insertion_point(field_set:mcs_control.mcs)
}
inline void mcs_control::_internal_add_mcs(float value) {
  mcs_.Add(value);
}
inline void mcs_control::add_mcs(float value) {
  _internal_add_mcs(value);
  // @@protoc_insertion_point(field_add:mcs_control.mcs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
mcs_control::_internal_mcs() const {
  return mcs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
mcs_control::mcs() const {
  // @@protoc_insertion_point(field_list:mcs_control.mcs)
  return _internal_mcs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
mcs_control::_internal_mutable_mcs() {
  return &mcs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
mcs_control::mutable_mcs() {
  // @@protoc_insertion_point(field_mutable_list:mcs_control.mcs)
  return _internal_mutable_mcs();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fmcs_2eproto
